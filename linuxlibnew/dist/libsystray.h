/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/energye/systray/jna */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 5 "bridge_linux.go"

#include <stdint.h>

typedef void (*void_cb)();
typedef void (*menu_item_cb)(uint32_t id);

static void call_void(void_cb f) { if (f) { f(); } }
static void call_menu_item(menu_item_cb f, uint32_t id) { if (f) { f(id); } }

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void Systray_InitCallbacks(void_cb ready, void_cb exit, void_cb onClick, void_cb onRClick, menu_item_cb onMenuItem);
extern void Systray_Run();
extern void Systray_PrepareExternalLoop();
extern void Systray_NativeStart();
extern void Systray_NativeEnd();
extern void Systray_Quit();
extern void Systray_SetIcon(char* iconBytes, int length);
extern void Systray_SetTitle(char* title);
extern void Systray_SetTooltip(char* tooltip);
extern unsigned int Systray_AddMenuItem(char* title, char* tooltip);
extern unsigned int Systray_AddMenuItemCheckbox(char* title, char* tooltip, int checked);
extern void Systray_AddSeparator();
extern void Systray_ResetMenu();

// Submenu creation
//
extern unsigned int Systray_AddSubMenuItem(unsigned int parentID, char* title, char* tooltip);
extern unsigned int Systray_AddSubMenuItemCheckbox(unsigned int parentID, char* title, char* tooltip, int checked);

// Per-item operations
//
extern int Systray_MenuItem_SetTitle(unsigned int id, char* title);
extern void Systray_MenuItem_Enable(unsigned int id);
extern void Systray_MenuItem_Disable(unsigned int id);
extern void Systray_MenuItem_Show(unsigned int id);
extern void Systray_MenuItem_Hide(unsigned int id);
extern void Systray_MenuItem_Check(unsigned int id);
extern void Systray_MenuItem_Uncheck(unsigned int id);
extern void Systray_SetMenuItemIcon(char* iconBytes, int length, unsigned int id);
extern void Systray_GetLastClickXY(int* outX, int* outY);

#ifdef __cplusplus
}
#endif
